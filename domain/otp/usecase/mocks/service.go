// Code generated by MockGen. DO NOT EDIT.
// Source: domain/otp/usecase/otp.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	dto "gitlab.warungpintar.co/sales-platform/brook/domain/otp/dto"
)

// MockServiceManager is a mock of ServiceManager interface.
type MockServiceManager struct {
	ctrl     *gomock.Controller
	recorder *MockServiceManagerMockRecorder
}

// MockServiceManagerMockRecorder is the mock recorder for MockServiceManager.
type MockServiceManagerMockRecorder struct {
	mock *MockServiceManager
}

// NewMockServiceManager creates a new mock instance.
func NewMockServiceManager(ctrl *gomock.Controller) *MockServiceManager {
	mock := &MockServiceManager{ctrl: ctrl}
	mock.recorder = &MockServiceManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceManager) EXPECT() *MockServiceManagerMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockServiceManager) Login(ctx context.Context, input *dto.LoginRequest) (dto.Login, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, input)
	ret0, _ := ret[0].(dto.Login)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockServiceManagerMockRecorder) Login(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockServiceManager)(nil).Login), ctx, input)
}

// SendOTP mocks base method.
func (m *MockServiceManager) SendOTP(ctx context.Context, input *dto.SendOTPRequest) (dto.SendOTP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendOTP", ctx, input)
	ret0, _ := ret[0].(dto.SendOTP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendOTP indicates an expected call of SendOTP.
func (mr *MockServiceManagerMockRecorder) SendOTP(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendOTP", reflect.TypeOf((*MockServiceManager)(nil).SendOTP), ctx, input)
}

// Verify mocks base method.
func (m *MockServiceManager) Verify(ctx context.Context, input *dto.VerifyOTPRequest) (dto.SendOTP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", ctx, input)
	ret0, _ := ret[0].(dto.SendOTP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Verify indicates an expected call of Verify.
func (mr *MockServiceManagerMockRecorder) Verify(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockServiceManager)(nil).Verify), ctx, input)
}
