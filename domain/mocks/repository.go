// Code generated by MockGen. DO NOT EDIT.
// Source: domain/domain.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "gitlab.warungpintar.co/sales-platform/brook/domain/company/entity"
	entity0 "gitlab.warungpintar.co/sales-platform/brook/domain/user/entity"
)

// MockUserDomainInterface is a mock of UserDomainInterface interface.
type MockUserDomainInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUserDomainInterfaceMockRecorder
}

// MockUserDomainInterfaceMockRecorder is the mock recorder for MockUserDomainInterface.
type MockUserDomainInterfaceMockRecorder struct {
	mock *MockUserDomainInterface
}

// NewMockUserDomainInterface creates a new mock instance.
func NewMockUserDomainInterface(ctrl *gomock.Controller) *MockUserDomainInterface {
	mock := &MockUserDomainInterface{ctrl: ctrl}
	mock.recorder = &MockUserDomainInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserDomainInterface) EXPECT() *MockUserDomainInterfaceMockRecorder {
	return m.recorder
}

// UserActivation mocks base method.
func (m *MockUserDomainInterface) UserActivation(ctx context.Context, userData *entity0.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserActivation", ctx, userData)
	ret0, _ := ret[0].(error)
	return ret0
}

// UserActivation indicates an expected call of UserActivation.
func (mr *MockUserDomainInterfaceMockRecorder) UserActivation(ctx, userData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserActivation", reflect.TypeOf((*MockUserDomainInterface)(nil).UserActivation), ctx, userData)
}

// UserRegister mocks base method.
func (m *MockUserDomainInterface) UserRegister(ctx context.Context, userData *entity0.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserRegister", ctx, userData)
	ret0, _ := ret[0].(error)
	return ret0
}

// UserRegister indicates an expected call of UserRegister.
func (mr *MockUserDomainInterfaceMockRecorder) UserRegister(ctx, userData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserRegister", reflect.TypeOf((*MockUserDomainInterface)(nil).UserRegister), ctx, userData)
}

// MockCompanyDomainInterface is a mock of CompanyDomainInterface interface.
type MockCompanyDomainInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCompanyDomainInterfaceMockRecorder
}

// MockCompanyDomainInterfaceMockRecorder is the mock recorder for MockCompanyDomainInterface.
type MockCompanyDomainInterfaceMockRecorder struct {
	mock *MockCompanyDomainInterface
}

// NewMockCompanyDomainInterface creates a new mock instance.
func NewMockCompanyDomainInterface(ctrl *gomock.Controller) *MockCompanyDomainInterface {
	mock := &MockCompanyDomainInterface{ctrl: ctrl}
	mock.recorder = &MockCompanyDomainInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCompanyDomainInterface) EXPECT() *MockCompanyDomainInterfaceMockRecorder {
	return m.recorder
}

// CompanyRegister mocks base method.
func (m *MockCompanyDomainInterface) CompanyRegister(ctx context.Context, companyData *entity.Company) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompanyRegister", ctx, companyData)
	ret0, _ := ret[0].(error)
	return ret0
}

// CompanyRegister indicates an expected call of CompanyRegister.
func (mr *MockCompanyDomainInterfaceMockRecorder) CompanyRegister(ctx, companyData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompanyRegister", reflect.TypeOf((*MockCompanyDomainInterface)(nil).CompanyRegister), ctx, companyData)
}
