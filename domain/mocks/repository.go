// Code generated by MockGen. DO NOT EDIT.
// Source: domain/domain.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	dto "gitlab.warungpintar.co/sales-platform/brook/domain/otp/dto"
	entity "gitlab.warungpintar.co/sales-platform/brook/domain/user/entity"
)

// MockUserDomainInterface is a mock of UserDomainInterface interface.
type MockUserDomainInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUserDomainInterfaceMockRecorder
}

// MockUserDomainInterfaceMockRecorder is the mock recorder for MockUserDomainInterface.
type MockUserDomainInterfaceMockRecorder struct {
	mock *MockUserDomainInterface
}

// NewMockUserDomainInterface creates a new mock instance.
func NewMockUserDomainInterface(ctrl *gomock.Controller) *MockUserDomainInterface {
	mock := &MockUserDomainInterface{ctrl: ctrl}
	mock.recorder = &MockUserDomainInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserDomainInterface) EXPECT() *MockUserDomainInterfaceMockRecorder {
	return m.recorder
}

// UserRegister mocks base method.
func (m *MockUserDomainInterface) UserRegister(ctx context.Context, userData *entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserRegister", ctx, userData)
	ret0, _ := ret[0].(error)
	return ret0
}

// UserRegister indicates an expected call of UserRegister.
func (mr *MockUserDomainInterfaceMockRecorder) UserRegister(ctx, userData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserRegister", reflect.TypeOf((*MockUserDomainInterface)(nil).UserRegister), ctx, userData)
}

// MockOtpDomainInterface is a mock of OtpDomainInterface interface.
type MockOtpDomainInterface struct {
	ctrl     *gomock.Controller
	recorder *MockOtpDomainInterfaceMockRecorder
}

// MockOtpDomainInterfaceMockRecorder is the mock recorder for MockOtpDomainInterface.
type MockOtpDomainInterfaceMockRecorder struct {
	mock *MockOtpDomainInterface
}

// NewMockOtpDomainInterface creates a new mock instance.
func NewMockOtpDomainInterface(ctrl *gomock.Controller) *MockOtpDomainInterface {
	mock := &MockOtpDomainInterface{ctrl: ctrl}
	mock.recorder = &MockOtpDomainInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOtpDomainInterface) EXPECT() *MockOtpDomainInterfaceMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockOtpDomainInterface) Login(ctx context.Context, input *dto.LoginRequest) (dto.Login, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, input)
	ret0, _ := ret[0].(dto.Login)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockOtpDomainInterfaceMockRecorder) Login(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockOtpDomainInterface)(nil).Login), ctx, input)
}

// SendOTP mocks base method.
func (m *MockOtpDomainInterface) SendOTP(ctx context.Context, input *dto.SendOTPRequest) (dto.SendOTP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendOTP", ctx, input)
	ret0, _ := ret[0].(dto.SendOTP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendOTP indicates an expected call of SendOTP.
func (mr *MockOtpDomainInterfaceMockRecorder) SendOTP(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendOTP", reflect.TypeOf((*MockOtpDomainInterface)(nil).SendOTP), ctx, input)
}

// Verify mocks base method.
func (m *MockOtpDomainInterface) Verify(ctx context.Context, input *dto.VerifyOTPRequest) (dto.SendOTP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", ctx, input)
	ret0, _ := ret[0].(dto.SendOTP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Verify indicates an expected call of Verify.
func (mr *MockOtpDomainInterfaceMockRecorder) Verify(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockOtpDomainInterface)(nil).Verify), ctx, input)
}
