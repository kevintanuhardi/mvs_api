// Code generated by MockGen. DO NOT EDIT.
// Source: domain/usecase/service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	dto "gitlab.warungpintar.co/sales-platform/brook/domain/dto"
	reflect "reflect"
)

// MockServiceManager is a mock of ServiceManager interface
type MockServiceManager struct {
	ctrl     *gomock.Controller
	recorder *MockServiceManagerMockRecorder
}

// MockServiceManagerMockRecorder is the mock recorder for MockServiceManager
type MockServiceManagerMockRecorder struct {
	mock *MockServiceManager
}

// NewMockServiceManager creates a new mock instance
func NewMockServiceManager(ctrl *gomock.Controller) *MockServiceManager {
	mock := &MockServiceManager{ctrl: ctrl}
	mock.recorder = &MockServiceManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockServiceManager) EXPECT() *MockServiceManagerMockRecorder {
	return m.recorder
}

// OrderList mocks base method
func (m *MockServiceManager) OrderList(ctx context.Context) ([]*dto.OrderDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrderList", ctx)
	ret0, _ := ret[0].([]*dto.OrderDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrderList indicates an expected call of OrderList
func (mr *MockServiceManagerMockRecorder) OrderList(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderList", reflect.TypeOf((*MockServiceManager)(nil).OrderList), ctx)
}
