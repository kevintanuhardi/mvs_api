// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/router/router.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	middleware "gitlab.warungpintar.co/sales-platform/brook/pkg/middleware"
	router "gitlab.warungpintar.co/sales-platform/brook/pkg/router"
	http "net/http"
	reflect "reflect"
)

// MockHttpRouter is a mock of HttpRouter interface
type MockHttpRouter struct {
	ctrl     *gomock.Controller
	recorder *MockHttpRouterMockRecorder
}

// MockHttpRouterMockRecorder is the mock recorder for MockHttpRouter
type MockHttpRouterMockRecorder struct {
	mock *MockHttpRouter
}

// NewMockHttpRouter creates a new mock instance
func NewMockHttpRouter(ctrl *gomock.Controller) *MockHttpRouter {
	mock := &MockHttpRouter{ctrl: ctrl}
	mock.recorder = &MockHttpRouterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHttpRouter) EXPECT() *MockHttpRouterMockRecorder {
	return m.recorder
}

// GET mocks base method
func (m *MockHttpRouter) GET(path string, handler router.HandlerFunc) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GET", path, handler)
}

// GET indicates an expected call of GET
func (mr *MockHttpRouterMockRecorder) GET(path, handler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GET", reflect.TypeOf((*MockHttpRouter)(nil).GET), path, handler)
}

// POST mocks base method
func (m *MockHttpRouter) POST(path string, handler router.HandlerFunc) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "POST", path, handler)
}

// POST indicates an expected call of POST
func (mr *MockHttpRouterMockRecorder) POST(path, handler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "POST", reflect.TypeOf((*MockHttpRouter)(nil).POST), path, handler)
}

// PUT mocks base method
func (m *MockHttpRouter) PUT(path string, handler router.HandlerFunc) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PUT", path, handler)
}

// PUT indicates an expected call of PUT
func (mr *MockHttpRouterMockRecorder) PUT(path, handler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PUT", reflect.TypeOf((*MockHttpRouter)(nil).PUT), path, handler)
}

// OPTIONS mocks base method
func (m *MockHttpRouter) OPTIONS(path string, handler router.HandlerFunc) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OPTIONS", path, handler)
}

// OPTIONS indicates an expected call of OPTIONS
func (mr *MockHttpRouterMockRecorder) OPTIONS(path, handler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OPTIONS", reflect.TypeOf((*MockHttpRouter)(nil).OPTIONS), path, handler)
}

// MockRegistrator is a mock of Registrator interface
type MockRegistrator struct {
	ctrl     *gomock.Controller
	recorder *MockRegistratorMockRecorder
}

// MockRegistratorMockRecorder is the mock recorder for MockRegistrator
type MockRegistratorMockRecorder struct {
	mock *MockRegistrator
}

// NewMockRegistrator creates a new mock instance
func NewMockRegistrator(ctrl *gomock.Controller) *MockRegistrator {
	mock := &MockRegistrator{ctrl: ctrl}
	mock.recorder = &MockRegistratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRegistrator) EXPECT() *MockRegistratorMockRecorder {
	return m.recorder
}

// AddMiddlewareWrapper mocks base method
func (m *MockRegistrator) AddMiddlewareWrapper(wrapper ...middleware.Wrapper) router.Registrator {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range wrapper {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddMiddlewareWrapper", varargs...)
	ret0, _ := ret[0].(router.Registrator)
	return ret0
}

// AddMiddlewareWrapper indicates an expected call of AddMiddlewareWrapper
func (mr *MockRegistratorMockRecorder) AddMiddlewareWrapper(wrapper ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMiddlewareWrapper", reflect.TypeOf((*MockRegistrator)(nil).AddMiddlewareWrapper), wrapper...)
}

// Register mocks base method
func (m *MockRegistrator) Register(method, path string, handler router.HandlerFunc) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Register", method, path, handler)
}

// Register indicates an expected call of Register
func (mr *MockRegistratorMockRecorder) Register(method, path, handler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockRegistrator)(nil).Register), method, path, handler)
}

// ServeHTTP mocks base method
func (m *MockRegistrator) ServeHTTP(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ServeHTTP", arg0, arg1)
}

// ServeHTTP indicates an expected call of ServeHTTP
func (mr *MockRegistratorMockRecorder) ServeHTTP(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServeHTTP", reflect.TypeOf((*MockRegistrator)(nil).ServeHTTP), arg0, arg1)
}
