// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package adapter

import (
	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"
)

// mockGormOpen is an autogenerated mock type for the gormOpen type
type mockGormOpen struct {
	mock.Mock
}

// Execute provides a mock function with given fields: dialector, opts
func (_m *mockGormOpen) Execute(dialector gorm.Dialector, opts ...gorm.Option) (*gorm.DB, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, dialector)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func(gorm.Dialector, ...gorm.Option) *gorm.DB); ok {
		r0 = rf(dialector, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(gorm.Dialector, ...gorm.Option) error); ok {
		r1 = rf(dialector, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
